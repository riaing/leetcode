Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, '+', '-', '*', '/' operators, and open '(' and closing parentheses ')'. The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "1+1"
Output: 2
Example 2:

Input: s = "6-4/2"
Output: 4
Example 3:

Input: s = "2*(5+5*2)/3+(6/2+8)"
Output: 21
 

Constraints:

1 <= s <= 104
s consists of digits, '+', '-', '*', '/', '(', and ')'.
s is a valid expression.

--------------- 双deque题--------------
class Solution {
    public int calculate(String s) {
        // 把数字处理好，把原始string放到 queue里
        Deque<String> input = new LinkedList<String>(); 
        String num = "";
        for (char c : s.toCharArray()) {
            if (isDigit(c)) {
                num += c;
            }
            else {
                if (!num.isEmpty()) {
                    input.addLast(num);
                    num = "";
                }
                input.addLast(c+"");
            }
        }
        if (!num.isEmpty()) {
            input.add(num);
        }
        
        return helper(input); 
    }
    
    /* 重点是每次遇到符号时，处理的是符号前的数字
    */
    private int helper(Deque<String> input) {
        Deque<Integer> stack = new LinkedList<Integer>(); 
        String sign = "+";
        int num = 0; 
        while (input.size() > 0) {
            String cur = input.removeFirst(); 
            System.out.println(cur); 
            if (isDigit(cur.charAt(0))) {
                num = Integer.parseInt(cur);
            }
            if (cur.equals("(")) {
                num = helper(input);
            }

            
            // 如果不是数字，就是遇到了下一个符号，
            // 之前的数字和符号就要存进栈中。 重点：之前的！
            if (!isDigit(cur.charAt(0)) || input.size() == 0){ // 进来的有可能是走到底了，或符号，或括号
                if (sign.equals("+")) {
                    stack.push(num);
                }
                if (sign.equals("-")) {
                    stack.push(-num);
                }
                if (sign.equals("*")) {
                    int pre = stack.pop();
                    stack.push(pre * num); 
                }
                if (sign.equals("/")) {
                    int pre = stack.pop();
                    stack.push(pre/num);
                }
                // 更新到当前的
                num = 0;
                sign = cur; 
            }
            if (cur.equals(")")) { // 
                break; // 遇到右括号返回递归结果, 一定得放最后
            }
        }
                   
        // 最后拿出stack的元素做加
        int res = 0;
        while (!stack.isEmpty()) {
            res += stack.pop();
        }
        return res; 
    }
    
    private boolean isDigit(char c) {
        if (c >= '0' && c <= '9') {
            return true;
        }
        return false;
    }
}
